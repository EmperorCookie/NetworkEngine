<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// PARAMETERS //
tick_rate = 0;
server_ip = "";
port = 6942;
port_udp = -1;
// LOGIC //
socket = -1;
socket_udp = -1;
tick = 0;
local_entities = ds_list_create();
remote_entities = ds_map_create();
zone_map = ds_map_create();
server_time_delta = 0;
server_time_timer = 0;
server_time_acquired = false;
server_time_iterations = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(local_entities);
ds_map_destroy(remote_entities);
ds_list_destroy(server_time_iterations);
ds_map_destroy(zone_map);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tick += tick_rate * delta_time * 0.000001;
if(tick &gt;= 1) {
    tick = frac(tick);
    // UPDATE LOCAL ENTITIES //
    var tcp_sync = buffer_create(1, buffer_grow, 1);
    var udp_sync = buffer_create(1, buffer_grow, 1);
    buffer_write(tcp_sync, buffer_u8, NET.SYNC_ENTITY);
    buffer_write(udp_sync, buffer_u8, NET.SYNC_ENTITY);
    var tcp_updates = false;
    var udp_updates = false;
    for(var a = ds_list_size(local_entities) - 1; a &gt;= 0; a -= 1) {
        with(local_entities[|a]) {
            if(server_id == noone) {
                continue;
            }
            var tcp_done = false;
            var udp_done = false;
            if(sync_properties) {
                buffer_write(udp_sync, buffer_bool, true);
                buffer_write(udp_sync, buffer_u32, server_id);
                udp_done = true;
                udp_updates = true;
                buffer_write(udp_sync, buffer_bool, true);
                buffer_write(udp_sync, buffer_u8, SYNC.PROPERTIES);
                buffer_write(udp_sync, buffer_bool, solid);
                buffer_write(udp_sync, buffer_bool, visible);
                buffer_write(udp_sync, buffer_bool, persistent);
                buffer_write(udp_sync, buffer_f64, depth);
                buffer_write(udp_sync, buffer_u32, sprite_index);
                buffer_write(udp_sync, buffer_f64, image_alpha);
                buffer_write(udp_sync, buffer_f64, image_blend);
                buffer_write(udp_sync, buffer_f64, image_index);
                buffer_write(udp_sync, buffer_f64, image_speed);
                buffer_write(udp_sync, buffer_f64, image_single);
                buffer_write(udp_sync, buffer_f64, image_xscale);
                buffer_write(udp_sync, buffer_f64, image_yscale);
            }
            if(sync_movement) {
                if(!udp_done) {
                    buffer_write(udp_sync, buffer_bool, true);
                    buffer_write(udp_sync, buffer_u32, server_id);
                    udp_done = true;
                    udp_updates = true;
                }
                buffer_write(udp_sync, buffer_bool, true);
                buffer_write(udp_sync, buffer_u8, SYNC.MOVEMENT);
                buffer_write(udp_sync, buffer_f64, friction);
                buffer_write(udp_sync, buffer_f64, gravity);
                buffer_write(udp_sync, buffer_f64, gravity_direction);
                buffer_write(udp_sync, buffer_f64, hspeed);
                buffer_write(udp_sync, buffer_f64, vspeed);
                buffer_write(udp_sync, buffer_f64, x);
                buffer_write(udp_sync, buffer_f64, y);
            }
            if(sync_physics) {
                if(!phy_sleeping) {
                    if(!udp_done) {
                        buffer_write(udp_sync, buffer_bool, true);
                        buffer_write(udp_sync, buffer_u32, server_id);
                        udp_done = true;
                        udp_updates = true;
                    }
                    buffer_write(udp_sync, buffer_bool, true);
                    buffer_write(udp_sync, buffer_u8, SYNC.PHYSICS);
                    buffer_write(udp_sync, buffer_bool, phy_active);
                    buffer_write(udp_sync, buffer_f64, phy_angular_velocity);
                    buffer_write(udp_sync, buffer_f64, phy_angular_damping);
                    buffer_write(udp_sync, buffer_f64, phy_linear_velocity_x);
                    buffer_write(udp_sync, buffer_f64, phy_linear_velocity_y);
                    buffer_write(udp_sync, buffer_f64, phy_linear_damping);
                    buffer_write(udp_sync, buffer_f64, phy_speed_x);
                    buffer_write(udp_sync, buffer_f64, phy_speed_y);
                    buffer_write(udp_sync, buffer_f64, phy_position_x);
                    buffer_write(udp_sync, buffer_f64, phy_position_y);
                    buffer_write(udp_sync, buffer_f64, phy_rotation);
                    buffer_write(udp_sync, buffer_f64, phy_fixed_rotation);
                    buffer_write(udp_sync, buffer_bool, phy_bullet);
                }
            }
            var tcp_var_done = false;
            var udp_var_done = false;
            for(var i = ds_list_size(sv_names) - 1; i &gt;= 0; i -= 1) {
                var n = sv_names[|i];
                if(sv_tcp[?n]) {
                    if(sv_changed[?n]) {
                        sv_changed[?n] = false;
                        if(!tcp_done) {
                            buffer_write(tcp_sync, buffer_bool, true);
                            buffer_write(tcp_sync, buffer_u32, server_id);
                            tcp_done = true;
                            tcp_updates = true;
                        }
                        if(!tcp_var_done) {
                            buffer_write(tcp_sync, buffer_bool, true);
                            buffer_write(tcp_sync, buffer_u8, SYNC.VARIABLES);
                            tcp_var_done = true;
                        }
                        buffer_write(tcp_sync, buffer_bool, true);
                        buffer_write(tcp_sync, buffer_string, n);
                        buffer_write(tcp_sync, buffer_u8, sv_types[?n]);
                        buffer_write(tcp_sync, sv_types[?n], sv[?n]);
                    }
                } else {
                    if(!udp_done) {
                        buffer_write(udp_sync, buffer_bool, true);
                        buffer_write(udp_sync, buffer_u32, id);
                        udp_done = true;
                        udp_updates = true;
                    }
                    if(!udp_var_done) {
                        buffer_write(udp_sync, buffer_bool, true);
                        buffer_write(udp_sync, buffer_u8, SYNC.VARIABLES);
                        udp_var_done = true;
                    }
                    buffer_write(udp_sync, buffer_bool, true);
                    buffer_write(udp_sync, buffer_string, n);
                    buffer_write(udp_sync, buffer_u8, sv_types[?n]);
                    buffer_write(udp_sync, sv_types[?n], sv[?n]);
                }
            }
            if(tcp_var_done) {
                buffer_write(tcp_sync, buffer_bool, false);
            }
            if(udp_var_done) {
                buffer_write(udp_sync, buffer_bool, false);
            }
            if(tcp_done) {
                buffer_write(tcp_sync, buffer_bool, false);
            }
            if(udp_done) {
                buffer_write(udp_sync, buffer_bool, false);
            }
        }
    }
    if(tcp_updates) {
        buffer_write(tcp_sync, buffer_bool, false);
        network_send_packet(socket, tcp_sync, buffer_tell(tcp_sync));
    }
    buffer_delete(tcp_sync);
    if(udp_updates) {
        buffer_write(udp_sync, buffer_bool, false);
        network_send_udp(socket_udp, server_ip, port, udp_sync, buffer_tell(udp_sync));
    }
    buffer_delete(udp_sync);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sock = async_load[?"id"];
if(sock == socket || sock == socket_udp) {
    if(async_load[?"type"] == network_type_data) {
        client_packet_handle(async_load[?"buffer"]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client_disconnect();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
